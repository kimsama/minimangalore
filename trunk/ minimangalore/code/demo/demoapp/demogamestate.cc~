//-----------------------------------------------------------------------------
#include "demoapp/demogamestate.h"
#include "input/ninputserver.h"
#include "video/nvideoserver.h"
#include "particle/nparticleserver.h"
#include "particle/nparticleserver2.h"

//-----------------------------------------------------------------------------
/**
*/
DemoGameState::DemoGameState()
{
}

//-----------------------------------------------------------------------------
/**
*/
DemoGameState::~DemoGameState()
{
}

//-----------------------------------------------------------------------------
/**
*/
void 
DemoGameState::OnStateEnter(const nString& prevState)
{
    GameStateHandler::OnStateEnter(prevState);

    //TODO: Load FSM

    // create an default light entity
    CreateDefaultLight();

    // create an camera entity
    CreateCamera();

    // create an player entity
    CreatePlayer();
}

//-----------------------------------------------------------------------------
/**
*/
void 
DemoGameState::OnStateLeave(const nString& nextState)
{
    //TODO: put state leave code 
 
    GameStateHandler::OnStateLeave(nextState);
}

//-----------------------------------------------------------------------------
/**
*/
/*
nString 
DemoGameState::OnFrame()
{
    bool running = true;

    // toggle visualizations
    if (nInputServer::Instance()->GetButton("togglePhysicsVisualization"))
    {
        this->physicsVisualizationEnabled = !this->physicsVisualizationEnabled;
    }
    if (nInputServer::Instance()->GetButton("toggleGraphicsVisualization"))
    {
        this->graphicsVisualizationEnabled = !this->graphicsVisualizationEnabled;
    }
    if (nInputServer::Instance()->GetButton("toggleFOVVisualization"))
    {
        this->fovVisualization = !this->fovVisualization;
    }

    // trigger subsystem and Nebula servers
    nVideoServer::Instance()->Trigger();
    Input::Server::Instance()->Trigger();
    running &= Foundation::Server::Instance()->GetScriptServer()->Trigger();

    // trigger the audio and game subsystems
    Audio::Server::Instance()->BeginScene();
    Game::Server::Instance()->OnFrame();
    Audio::Server::Instance()->EndScene();
    VFX::Server::Instance()->BeginScene();
    nParticleServer::Instance()->Trigger();
    nParticleServer2::Instance()->Trigger();
    running &= Graphics::Server::Instance()->Trigger();

    if (Graphics::Server::Instance()->BeginRender())
    {
        UI::Server::Instance()->Render();
        Graphics::Server::Instance()->Render();

        if (this->graphicsVisualizationEnabled)
        {
            Graphics::Server::Instance()->RenderDebug();
        }
        if (this->physicsVisualizationEnabled)
        {
            Physics::Server::Instance()->RenderDebug();
        }
        if (this->fovVisualization)
        {
            Navigation::Server::Instance()->RenderDebug();
        }
        Graphics::Server::Instance()->EndRender();
    }
    VFX::Server::Instance()->EndScene();

    // trigger kernel server
    nKernelServer::Instance()->Trigger();

    if (!running)
    {
        return this->exitState;
    }
    else
    {
        return this->GetName();
    }
}
*/

//-----------------------------------------------------------------------------
/**
*/
bool DemoGameState::CreateDefaultLight()
{
   Managers::FactoryManager *factoryManager = Managers::FactoryManager::Instance();
   Ptr<Game::Entity> light = factoryManager->CreateEntityByClassName("Entity");
   Ptr<Game::Property> lp = factoryManager->CreateProperty("LightProperty");
   light->AttachProperty(lp);

   matrix44 mx;
   mx.rotate_z(N_PI / 8);
   mx.rotate_x(-N_PI / 3);
   mx.translate(vector3(0, 100, 0));
   light->SetMatrix44(Attr::Transform, mx);
   light->SetString(Attr::LightType, "Directional");
   light->SetVector4(Attr::LightColor, vector4(0.8f, 0.8f, 0.9f, 0.7f));
   //light->SetVector3(Attr::LightPos, vector3(45.0f, 45.0f, 45.0f));
   //light->SetVector4(Attr::LightRot, vector4(0.0f, 0.0f, 0.0f, 1.0f));
   light->SetVector4(Attr::LightAmbient, vector4(0.2f, 0.2f, 0.1f, 0.0f));
   light->SetBool(Attr::LightCastShadows, true);
   Managers::EntityManager::Instance()->AttachEntity(light);

    return true;
}

//-----------------------------------------------------------------------------
/**
*/
bool DemoGameState::CreateCamera()
{

    return true;
}

//-----------------------------------------------------------------------------
/**
*/
bool DemoGameState::CreatePlayer()
{
    Managers::FactoryManager *factoryManager = Managers::FactoryManager::Instance();
    this->player = factoryManager->CreateEntityByClassName("Entity");

    // specify physics entity
    Ptr<Game::Property> gp = factoryManager->CreateProperty("ActorPhysicsProperty");
    this->player->AttachProperty(gp);

    // specify graphic entity
    Ptr<Game::Property> gp = factoryManager->CreateProperty("GraphicsProperty");
    this->player->AttachProperty(gp);
    this->player->SetString(Attr::Graphics, "player/player");

    Ptr<Game::Property> ip = factoryManager->CreateProperty("PlayerInputProperty");
    this->player->AttachProperty(ip);

    Ptr<Game::Property> cp = factoryManager->CreateProperty("ChaseCameraProperty");
    this->player->AttachProperty(cp);

    Managers::EntityManager::Instance()->AttachEntity(this->player);

    return true;
}

