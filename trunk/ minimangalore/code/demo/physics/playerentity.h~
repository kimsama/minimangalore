#ifndef PHYSICS_PLAYERENTITY_H
#define PHYSICS_PLAYERENTITY_H
//------------------------------------------------------------------------------
/**
*/

//------------------------------------------------------------------------------
namespace Physics
{

class PlayerEntity : public Entity
{
    DeclareRtti;
    DeclareFactory(PlayerEntity);

public:
    /// constructor
    PlayerEntity(); 
    /// destructor.
    virtual ~PlayerEntity();
    /// called when attached to game entity
    virtual void OnActivate();
    /// called when removed from game entity
    virtual void OnDeactivate();
    /// invoked before stepping the simulation
    virtual void OnStepBefore();
    /// called on collision; decide if it is valid
    virtual bool OnCollide(Shape* collidee);
    /// set the current world space transformation
    virtual void SetTransform(const matrix44& m);
    /// get the current world space transformation
    virtual matrix44 GetTransform() const;
    /// return true if transformation has changed between OnFrameBefore() and OnFrameAfter()
    virtual bool HasTransformChanged() const;
    
protected:

};

RegisterFactory(PlayerEntity);

}
#endif
